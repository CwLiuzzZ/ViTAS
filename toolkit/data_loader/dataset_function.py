import os
import sys
sys.path.append('..')
sys.path.append('../..')
from toolkit.function.base_function import dirs_walk
import numpy as np
from glob import glob

def generate_file_lists(dataset,if_train=True,method='gt',save_method='delete'):

    '''
    input:
        dataset: choose type of dataset
        method: determine dir to load disparity maps; ep: (1)gt for groundtruth (2) PSMNet for disparity maps generated by PSMNet
        save_method: determine dir to save output disparity maps; ep: (1)gt for groundtruth (2) PSMNet for disparity maps generated by PSMNet
        if_train: choose training set or testing set
    output:
        return a dictionary of {path of left images, right images, input disparity maps, output disparity maps}
    '''

    if not '+' in dataset:
        return single_file_lists(dataset,if_train,method=method,save_method=save_method)[0]
    else:
        concat = None
        len=0
        dataset = dataset.split('+')
        for sub_dataset in dataset:
            sub_dic,len_ = single_file_lists(sub_dataset,if_train,method=method,save_method=save_method)
            if concat is None:
                concat = sub_dic.copy()
            else:
                for key in concat.keys():
                    concat[key] += sub_dic[key]
            len += len_
        print('total dataset contains {} samples'.format(str(len)))
        return concat

def single_file_lists(dataset,if_train,method='gt',save_method='delete',dataset_scale = None):
    splits = dataset.split('*') # check if re-scale the dataset
    if len(splits) == 1:
        dataset_scale = 1
    elif len(splits) == 2: # re-scale
        dataset_scale=float(splits[1])
        dataset = splits[0]
    else:
        raise ValueError('invalid dataset type input') 

    assert dataset in ['KITTI2012','KITTI2015','KITTIraw','middlebury2021','middlebury2014','middlebury2005','middlebury2006','ETH3D','MiddEval3F','MiddEval3H','MiddEval3Q','SceneFlow','SceneFlow_driving','SceneFlow_flying','SceneFlow_test','vkitti','MiddEval_ex'],dataset 

    addition_list = None
    if 'SceneFlow' in dataset: # 4400+20304 avoid save&load disp except for GT
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_SceneFlow(dataset,save_method)
    elif dataset == 'KITTIraw': # avoid lsave&load disp except for GT
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_KITTIraw(method,save_method)
    elif dataset == 'KITTI2015': # 200
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image,addition_list = load_KITTI2015(if_train,method,save_method)
    elif dataset == 'KITTI2012': # 194
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image,addition_list = load_KITTI2012(if_train,method,save_method)
    elif dataset == 'vkitti': # 21260
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_vkitti()
    elif dataset == 'ETH3D': # 27 max disp = 146 in test_set
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_ETH3D(if_train,method,save_method)
    elif 'MiddEval3' in dataset: # 15 max disp = 770 for full reso in test_set # 644,322,161 in F,H,Q train
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_MiddEval3(dataset,if_train,method,save_method) # 15
    elif dataset == 'middlebury2021': # 355 max disp = 356 in train
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_middlebury2021(method,save_method) # 355
    elif dataset == 'middlebury2014': # 138 max disp = 1074 in train
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_middlebury2014(if_train,method,save_method) # 138
    # elif dataset == 'middlebury2014_2':
    #     left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_middlebury2014(if_train,method,save_method,remove_dupli=True)
    elif dataset == 'middlebury2006': # 189 max disp = 230 in train
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_middlebury2006(method,save_method) # 189
    elif dataset == 'middlebury2005': # 54 max disp = 232 in train
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_middlebury2005(method,save_method) # 54
    elif 'middleburyMix' in dataset: # following CreStereo
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_middleburyMix(dataset,method,save_method)
    elif dataset == 'MiddEval_ex': # 05+06+14+21-MiddEval_Train
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_MiddEval_ex(method,save_method)

    if not addition_list is None:
        assert len(addition_list) == len(left_list)
        addition_list.sort()
    else:
        addition_list = [None]*len(left_list)
    list_sort(left_list,right_list,disp_list,save_path_disp,save_path_disp_image)

    # scale the dataset
    if not dataset_scale is None:
        if dataset_scale < 1: # down-scale
            dataset_scale_ = int(1/dataset_scale)
            disp_list = disp_list[0::dataset_scale_]
            right_list = right_list[0::dataset_scale_]
            left_list = left_list[0::dataset_scale_]
            save_path_disp = save_path_disp[0::dataset_scale_]
            save_path_disp_image = save_path_disp_image[0::dataset_scale_]
            addition_list = addition_list[0::dataset_scale_]
        elif dataset_scale > 1: # up-scale
            dataset_scale_ = int(dataset_scale)
            disp_list = disp_list*dataset_scale_
            right_list = right_list*dataset_scale_
            left_list = left_list*dataset_scale_
            save_path_disp = save_path_disp*dataset_scale_
            save_path_disp_image = save_path_disp_image*dataset_scale_
            addition_list = addition_list*dataset_scale_

    # check file numbers
    if if_train:
        assert len(left_list) == len(right_list) == len(disp_list) == len(save_path_disp) == len(save_path_disp_image),dataset+': '+str(len(left_list))+' '+str(len(right_list))+' '+str(len(disp_list))+' '+str(len(save_path_disp))+' '+str(len(save_path_disp_image))+' '
    else:
        assert len(left_list) == len(right_list) == len(save_path_disp) == len(save_path_disp_image),dataset+': '+str(len(left_list))+' '+str(len(right_list))+' '+str(len(save_path_disp))+' '+str(len(save_path_disp_image))+' '
    print('dataset {} contains {}*{}={} samples'.format(dataset,int(len(left_list)/dataset_scale),dataset_scale,len(left_list)))
    return {'left_list':left_list,'right_list':right_list,'disp_list':disp_list,'save_path_disp':save_path_disp,'save_path_disp_image':save_path_disp_image,'addition_list':addition_list},len(left_list)

def load_vkitti():
    data_dir='../datasets/vkitti2'
    left_list = sorted(glob(data_dir + '/Scene*/*/frames/rgb/Camera_0/rgb*.jpg'))
    right_list = [left.replace('/Camera_0/', '/Camera_1/') for left in left_list]
    disp_list = [left.replace('/rgb/', '/depth/').replace('rgb_', 'depth_')[:-3] + 'png' for left in left_list]
    save_path_disp = ['a/b/c/delete.png']*len(disp_list)
    save_path_disp_image = ['a/b/c/delete_vis.png']*len(disp_list)
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image

def load_middleburyMix(dataset,method,save_method):
    merge = {'left_list':[],'right_list':[],'disp_list':[],'save_path_disp':[],'save_path_disp_image':[]}
    
    left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_MiddEval3('H',True,method,save_method)
    list_sort(left_list,right_list,disp_list,save_path_disp,save_path_disp_image)
    if '1' in dataset:
        merge = dataset_front_merge(merge,left_list,right_list,disp_list,save_path_disp,save_path_disp_image,14)
    elif '2' in dataset:
        merge = dataset_behind_merge(merge,left_list,right_list,disp_list,save_path_disp,save_path_disp_image,-1)
    
    left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_middlebury2021(method,save_method)
    list_sort(left_list,right_list,disp_list,save_path_disp,save_path_disp_image)
    if '1' in dataset:
        merge = dataset_front_merge(merge,left_list,right_list,disp_list,save_path_disp,save_path_disp_image,335)
    elif '2' in dataset:
        merge = dataset_behind_merge(merge,left_list,right_list,disp_list,save_path_disp,save_path_disp_image,-20)
    
    left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_middlebury2014(True,method,save_method)
    list_sort(left_list,right_list,disp_list,save_path_disp,save_path_disp_image)
    if '1' in dataset:
        merge = dataset_front_merge(merge,left_list,right_list,disp_list,save_path_disp,save_path_disp_image,132)
    elif '2' in dataset:
        merge = dataset_behind_merge(merge,left_list,right_list,disp_list,save_path_disp,save_path_disp_image,-6)
    
    left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_middlebury2006(method,save_method)
    list_sort(left_list,right_list,disp_list,save_path_disp,save_path_disp_image)
    if '1' in dataset:
        merge = dataset_front_merge(merge,left_list,right_list,disp_list,save_path_disp,save_path_disp_image,171)
    elif '2' in dataset:
        merge = dataset_behind_merge(merge,left_list,right_list,disp_list,save_path_disp,save_path_disp_image,-18)
        
    left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_middlebury2005(method,save_method)
    list_sort(left_list,right_list,disp_list,save_path_disp,save_path_disp_image)
    if '1' in dataset:
        merge = dataset_front_merge(merge,left_list,right_list,disp_list,save_path_disp,save_path_disp_image,45)
    elif '2' in dataset:
        merge = dataset_behind_merge(merge,left_list,right_list,disp_list,save_path_disp,save_path_disp_image,-9)
    return merge['left_list'],merge['right_list'],merge['disp_list'],merge['save_path_disp'],merge['save_path_disp_image']

def dataset_behind_merge(merge,left_list,right_list,disp_list,save_path_disp,save_path_disp_image,length):
    merge['left_list'] += left_list[length:]
    merge['right_list'] += right_list[length:]
    merge['disp_list'] += disp_list[length:]
    merge['save_path_disp'] += save_path_disp[length:]
    merge['save_path_disp_image'] += save_path_disp_image[length:]
    return merge
    
def dataset_front_merge(merge,left_list,right_list,disp_list,save_path_disp,save_path_disp_image,length):
    merge['left_list'] += left_list[:length]
    merge['right_list'] += right_list[:length]
    merge['disp_list'] += disp_list[:length]
    merge['save_path_disp'] += save_path_disp[:length]
    merge['save_path_disp_image'] += save_path_disp_image[:length]
    return merge
    

def load_MiddEval_ex(method,save_method):
    merge = {'left_list':[],'right_list':[],'disp_list':[],'save_path_disp':[],'save_path_disp_image':[]}
    
    left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_middlebury2021(method,save_method) # 355
    print(len(left_list))
    list_sort(left_list,right_list,disp_list,save_path_disp,save_path_disp_image)
    merge = dataset_front_merge(merge,left_list,right_list,disp_list,save_path_disp,save_path_disp_image,len(left_list)) 
    
    left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_middlebury2014(True,method,save_method) # 138
    print(len(left_list))
    list_sort(left_list,right_list,disp_list,save_path_disp,save_path_disp_image)
    merge = dataset_front_merge(merge,left_list,right_list,disp_list,save_path_disp,save_path_disp_image,len(left_list))
    
    left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_middlebury2006(method,save_method) # 189
    print(len(left_list))
    list_sort(left_list,right_list,disp_list,save_path_disp,save_path_disp_image)
    merge = dataset_front_merge(merge,left_list,right_list,disp_list,save_path_disp,save_path_disp_image,len(left_list))
        
    left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_middlebury2005(method,save_method) # 54
    print(len(left_list))
    list_sort(left_list,right_list,disp_list,save_path_disp,save_path_disp_image)
    merge = dataset_front_merge(merge,left_list,right_list,disp_list,save_path_disp,save_path_disp_image,len(left_list))
    
    ME3_keys = ['Adir','Art','Jade','Moto','Piano','Pipe','Playroom','Playtable','Recycle','Shelves','Teddy','Vintage']
    delete_index = []
    for index,dir in enumerate(merge['left_list']):
        if any([key in dir for key in ME3_keys]):
            delete_index.append(index)
    
    merge['left_list'] = np.delete(merge['left_list'],delete_index)
    merge['right_list'] = np.delete(merge['right_list'],delete_index)
    merge['disp_list'] = np.delete(merge['disp_list'],delete_index)
    merge['save_path_disp'] = np.delete(merge['save_path_disp'],delete_index)
    merge['save_path_disp_image'] = np.delete(merge['save_path_disp_image'],delete_index)
    
    return merge['left_list'],merge['right_list'],merge['disp_list'],merge['save_path_disp'],merge['save_path_disp_image']    

def load_MiddEval3(dataset,if_train,method,save_method):
    if 'F' in dataset:
        if if_train:
            dataset_path = '../datasets/middlebury/MiddEval3/trainingF'
        else:
            dataset_path = '../datasets/middlebury/MiddEval3/testF'
    elif 'H' in dataset:
        if if_train:
            dataset_path = '../datasets/middlebury/MiddEval3/trainingH'
        else:
            dataset_path = '../datasets/middlebury/MiddEval3/testH'
    elif 'Q' in dataset:
        if if_train:
            dataset_path = '../datasets/middlebury/MiddEval3/trainingQ'
        else:
            dataset_path = '../datasets/middlebury/MiddEval3/testQ'
    left_list = []
    right_list = []
    disp_list = []
    paths = os.walk(dataset_path)
    for path, dir_lst, file_lst in paths:
        if 'im0' in str(file_lst):
            left_list.append(os.path.join(path,'im0.png'))
        if 'im1' in str(file_lst):
            right_list.append(os.path.join(path,'im1.png'))
        if method == 'gt' and 'disp0GT' in str(file_lst):
            disp_list.append(os.path.join(path,'disp0GT.pfm')) # 'disp0GT.pfm'
        elif not method == 'gt' and method in str(dir_lst):
            disp_list.append(os.path.join(path,'{}/disp0.npy'.format(method)))
    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(left_list)):
        save_dir = '/'.join(left_list[i].split('/')[:-1])
        save_dir = os.path.join(save_dir,'{}'.format(save_method))
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        save_path1 = os.path.join(save_dir,'disp0.npy')
        save_path2 = os.path.join(save_dir,'disp0.png')
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)    
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image

def load_ETH3D(if_train,method,save_method):
    if if_train:
        dataset_path = '../datasets/ETH3D/training'
    else:
        dataset_path = '../datasets/ETH3D/testing'
    left_list = []
    right_list = []
    disp_list = []
    paths = os.walk(dataset_path)
    
    for path, dir_lst, file_lst in paths:
        if 'im0' in str(file_lst):
            left_list.append(os.path.join(path,'im0.png'))
        if 'im1' in str(file_lst):
            right_list.append(os.path.join(path,'im1.png'))
        if method == 'gt' and 'disp0GT' in str(file_lst):
            disp_list.append(os.path.join(path,'disp0GT.pfm'))
        elif not method == 'gt' and method in str(file_lst):
            disp_list.append(os.path.join(path,'{}/disp0.npy'.format(method)))

    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(disp_list)):
        save_dir = '/'.join(disp_list[i].split('/')[:-1])
        save_dir = os.path.join(save_dir,'{}'.format(save_method))
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        save_path1 = os.path.join(save_dir,'disp0.npy')
        save_path2 = os.path.join(save_dir,'disp0.png')
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image

def load_middlebury2021(method,save_method):
    dataset_path = '../datasets/middlebury/2021'
    left_list = []
    right_list = []
    disp_list = []
    seqs = sorted(os.listdir(dataset_path))
    
    for s in seqs:
        seq_path = os.path.join(dataset_path,s)
        if method == 'gt':
            disp_dir = os.path.join(seq_path,'disp0.pfm')
        elif not method == 'gt' and method in str(file_lst):
            disp_dir = os.path.join(seq_path,'{}/disp0.npy'.format(method))
        paths = os.walk(os.path.join(dataset_path,s,'ambient'))
        for path, dir_lst, file_lst in paths:
            for left_file in file_lst:
                if left_file.startswith('im0'):
                    left_list.append(os.path.join(path,left_file))
                    right_list.append(os.path.join(path,left_file.replace('im0','im1')))
                    disp_list.append(disp_dir)
    
    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(disp_list)):
        save_dir = '/'.join(disp_list[i].split('/')[:-1])
        save_dir = os.path.join(save_dir,'{}'.format(save_method))
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        save_path1 = os.path.join(save_dir,'disp0.npy')
        save_path2 = os.path.join(save_dir,'disp0.png')
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image
    
def load_middlebury2014(if_train,method,save_method,remove_dupli=False):
    if if_train:
        dataset_path = '../datasets/middlebury/2014/training'
    else:
        dataset_path = '../datasets/middlebury/2014/testing'
    left_list = []
    right_list = []
    disp_list = []
    dupli_list = ['Adir','Jade','Motor','Piano','Pipe','Play','Recy','Vinta']
    
    seqs = sorted(os.listdir(dataset_path))
    for s in seqs:
        if remove_dupli:
            dupli_check = [du in s for du in dupli_list]
            if any(dupli_check):
                continue 
        seq_path = os.path.join(dataset_path,s)
        left_list += [os.path.join(seq_path,'im0.png')]*3
        right_list += [os.path.join(seq_path,'im1.png')]
        right_list += [os.path.join(seq_path,'im1E.png')]
        right_list += [os.path.join(seq_path,'im1L.png')]
        if method == 'gt':
            disp_dir = os.path.join(seq_path,'disp0.pfm')
        else:
            disp_dir = os.path.join(seq_path,'{}/disp0.npy'.format(method))
        disp_list += [disp_dir]*3
     
    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(disp_list)):
        save_dir = '/'.join(disp_list[i].split('/')[:-1])
        save_dir = os.path.join(save_dir,'{}'.format(save_method))
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        save_path1 = os.path.join(save_dir,'disp0.npy')
        save_path2 = os.path.join(save_dir,'disp0.png')
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image

def load_middlebury2006(method,save_method):
    dataset_path = '../datasets/middlebury/2006'
    left_list = []
    right_list = []
    disp_list = []
    seqs = sorted(os.listdir(dataset_path))
    
    for s in seqs:
        seq_path = os.path.join(dataset_path,s)
        if method == 'gt':
            disp_dir = os.path.join(seq_path,'disp1.png')
        elif not method == 'gt' and method in str(file_lst):
            disp_dir = os.path.join(seq_path,'{}/disp1.npy'.format(method))
        paths = os.walk(seq_path)
        for path, dir_lst, file_lst in paths:
            for left_file in file_lst:
                if left_file.startswith('view1'):
                    left_list.append(os.path.join(path,left_file))
                    right_list.append(os.path.join(path,left_file.replace('view1','view5')))
                    disp_list.append(disp_dir)
    
    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(disp_list)):
        save_dir = '/'.join(disp_list[i].split('/')[:-1])
        save_dir = os.path.join(save_dir,'{}'.format(save_method))
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        save_path1 = os.path.join(save_dir,'disp0.npy')
        save_path2 = os.path.join(save_dir,'disp0.png')
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image

def load_middlebury2005(method,save_method):
    dataset_path = '../datasets/middlebury/2005'
    dataset_path = '../datasets/middlebury/2005'
    left_list = []
    right_list = []
    disp_list = []
    seqs = sorted(os.listdir(dataset_path))
    for s in seqs:
        seq_path = os.path.join(dataset_path,s)
        if method == 'gt':
            disp_dir = os.path.join(seq_path,'disp1.png')
        elif not method == 'gt' and method in str(file_lst):
            disp_dir = os.path.join(seq_path,'{}/disp1.npy'.format(method))
        paths = os.walk(seq_path)
        for path, dir_lst, file_lst in paths:
            for left_file in file_lst:
                if left_file.startswith('view1'):
                    left_list.append(os.path.join(path,left_file))
                    right_list.append(os.path.join(path,left_file.replace('view1','view5')))
                    disp_list.append(disp_dir)
    
    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(disp_list)):
        save_dir = '/'.join(disp_list[i].split('/')[:-1])
        save_dir = os.path.join(save_dir,'{}'.format(save_method))
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        save_path1 = os.path.join(save_dir,'disp0.npy')
        save_path2 = os.path.join(save_dir,'disp0.png')
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image

def load_SceneFlow(dataset,save_method):
    if dataset == 'SceneFlow_test':
        dataset_paths = []
        for u in ['../datasets/sceneflow/flying/TEST/A','../datasets/sceneflow/flying/TEST/B','../datasets/sceneflow/flying/TEST/C']:
            for item in os.scandir(u):
                if item.is_dir():
                    dataset_paths.append(item.path)
    elif dataset == 'SceneFlow_driving':
        dataset_paths = ['../datasets/sceneflow/driving/15mm_focallength/scene_backwards/fast','../datasets/sceneflow/driving/15mm_focallength/scene_backwards/slow','../datasets/sceneflow/driving/15mm_focallength/scene_forwards/fast','../datasets/sceneflow/driving/15mm_focallength/scene_forwards/slow','../datasets/sceneflow/driving/35mm_focallength/scene_backwards/fast','../datasets/sceneflow/driving/35mm_focallength/scene_backwards/slow','../datasets/sceneflow/driving/35mm_focallength/scene_forwards/fast','../datasets/sceneflow/driving/35mm_focallength/scene_forwards/slow']
    elif dataset == 'SceneFlow_flying':
        dataset_paths = []
        for u in ['../datasets/sceneflow/flying/TRAIN/A','../datasets/sceneflow/flying/TRAIN/B','../datasets/sceneflow/flying/TRAIN/C']:
            for item in os.scandir(u):
                if item.is_dir():
                    dataset_paths.append(item.path)
    else: # full sceneflow dataset
        dataset_paths = ['../datasets/sceneflow/driving/15mm_focallength/scene_backwards/fast','../datasets/sceneflow/driving/15mm_focallength/scene_backwards/slow','../datasets/sceneflow/driving/15mm_focallength/scene_forwards/fast','../datasets/sceneflow/driving/15mm_focallength/scene_forwards/slow','../datasets/sceneflow/driving/35mm_focallength/scene_backwards/fast','../datasets/sceneflow/driving/35mm_focallength/scene_backwards/slow','../datasets/sceneflow/driving/35mm_focallength/scene_forwards/fast','../datasets/sceneflow/driving/35mm_focallength/scene_forwards/slow']
        for u in ['../datasets/sceneflow/flying/TRAIN/A','../datasets/sceneflow/flying/TRAIN/B','../datasets/sceneflow/flying/TRAIN/C']:
            for item in os.scandir(u):
                if item.is_dir():
                    dataset_paths.append(item.path)

    left_list = []
    right_list = []
    disp_list = []
    left_files = []
    for dataset_path in dataset_paths:
        left_dir = os.path.join(dataset_path,'left')
        right_dir = os.path.join(dataset_path,'right') # right, right_PT
        # if method == 'gt':
        #     disp_dir = os.path.join(dataset_path,'left')
        # else:
        #     disp_dir = os.path.join(dataset_path,'{}/disp'.format(method))
        left_files+=dirs_walk([left_dir])
        right_list+=dirs_walk([right_dir])
    left_list = list(filter(lambda x: 'png' in x, left_files))
    right_list = list(filter(lambda x: 'png' in x, right_list))  
    disp_list = list(filter(lambda x: 'pfm' in x or 'npy' in x, left_files))

    save_path_disp = []
    save_path_disp_image = []
    if dataset == 'SceneFlow_test':
        for i in range(len(left_list)):
            split_path = left_list[i].split('/')
            name = split_path[-1].split('.')[0]
            save_dir = '/'.join(split_path[:-2])
            save_dir1 = os.path.join(save_dir,'{}/disp'.format(save_method))
            save_dir2 = os.path.join(save_dir,'{}/vis'.format(save_method))
            save_path1 = os.path.join(save_dir1,'{}.npy'.format(name))
            save_path2 = os.path.join(save_dir2,'{}.png'.format(name))
            save_path_disp.append(save_path1)
            save_path_disp_image.append(save_path2)
            if not os.path.exists(save_dir1):
                os.makedirs(save_dir1)
            if not os.path.exists(save_dir2):
                os.makedirs(save_dir2)  
    else: # do not make dir for save the results
        save_path_disp = ['a/b/c/delete.png']*len(disp_list)
        save_path_disp_image = ['a/b/c/delete_vis.png']*len(disp_list)
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image

def load_KITTIraw(method,save_method):
    dirs_list = []
    left_list = []
    right_list = []
    disp_list = []
    dataset_path = '../datasets/KITTI/raw'
    paths = os.walk(dataset_path)
    for path, dir_lst, file_lst in paths:
        if '_sync' in path and path[-1] == 'c' and not path in dirs_list:
            if '09_29' in path and '0071' in path:
            # if '09_29_drive_0004' in path :
                dirs_list.append(path)
    dirs_list.sort()
    for dir in dirs_list:
        left_dir = os.path.join(dir,'image_02/data')
        right_dir = os.path.join(dir,'image_03/data')
        if method == 'gt':
            disp_dir = os.path.join(dir,'RAFT_Stereo/disp')
        else:
            disp_dir = os.path.join(dir,'{}/vis'.format(method))
        sub_left_list = dirs_walk([left_dir])
        sub_right_list = dirs_walk([right_dir])
        assert len(sub_left_list) == len(sub_right_list)
        sub_disp_list = dirs_walk([disp_dir])
        left_list+=sub_left_list
        right_list+=sub_right_list
        disp_list+=sub_disp_list
    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(left_list)):
        split_path = left_list[i].split('/')
        name = split_path[-1].split('.')[0]
        save_dir = '/'.join(split_path[:-3])
        save_dir1 = os.path.join(save_dir,'{}/disp'.format(save_method))
        save_dir2 = os.path.join(save_dir,'{}/vis'.format(save_method))
        # save_dir1 = save_dir1.replace('raw', 'raw_disp')
        # save_dir2 = save_dir2.replace('raw', 'raw_png')
        save_path1 = os.path.join(save_dir1,'{}.npy'.format(name))
        save_path2 = os.path.join(save_dir2,'{}.png'.format(name))
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
        if not os.path.exists(save_dir1):
            os.makedirs(save_dir1)
        if not os.path.exists(save_dir2):
            os.makedirs(save_dir2)
    # save_path_disp = ['a/b/c/delete.png']*len(disp_list)
    # save_path_disp_image = ['a/b/c/delete_vis.png']*len(disp_list)
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image


def load_KITTI2015(if_train,method,save_method):
    if if_train:
        dataset_path = '../datasets/KITTI/2015/training'
    else:
        dataset_path = '../datasets/KITTI/2015/testing'
    left_dir = os.path.join(dataset_path,'image_2')
    right_dir = os.path.join(dataset_path,'image_3')
    if method == 'gt':
        if if_train:
            disp_dir = os.path.join(dataset_path,'disp_occ_0')
        else:
            disp_dir = os.path.join(dataset_path,'IGEV_gt/disp').replace('KITTI_2','KITTI')
    else:
        disp_dir = os.path.join(dataset_path,'{}/disp'.format(method))
    addition_dir =   os.path.join(dataset_path,'fg_mask')
        
    left_list = dirs_walk([left_dir])
    right_list = dirs_walk([right_dir])
    disp_list = dirs_walk([disp_dir])
    addition_list = dirs_walk([addition_dir])
    for file_name in left_list.copy():
        if '_11' in file_name:
            left_list.remove(file_name)
    for file_name in right_list.copy():
        if '_11' in file_name:
            right_list.remove(file_name)

    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(left_list)):
        split_path = left_list[i].split('/')
        name = split_path[-1].split('.')[0]
        save_dir = '/'.join(split_path[:-2])
        save_dir1 = os.path.join(save_dir,'{}/disp'.format(save_method))
        save_dir2 = os.path.join(save_dir,'{}/vis'.format(save_method))
        save_path1 = os.path.join(save_dir1,'{}.npy'.format(name))
        save_path2 = os.path.join(save_dir2,'{}.png'.format(name))
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
    if not os.path.exists(save_dir1):
        os.makedirs(save_dir1)
    if not os.path.exists(save_dir2):
        os.makedirs(save_dir2)
    # return left_list,right_list,disp_list,save_path_disp,save_path_disp_image,addition_list
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image,None

def load_KITTI2012(if_train,method,save_method):
    if if_train:
        dataset_path = '../datasets/KITTI/2012/training'
    else:
        dataset_path = '../datasets/KITTI/2012/testing'
    left_dir = os.path.join(dataset_path,'colored_0')
    right_dir = os.path.join(dataset_path,'colored_1')
    addition_dir =   os.path.join(dataset_path,'fg_mask')
    if method == 'gt':
        if if_train:
            disp_dir = os.path.join(dataset_path,'disp_occ')
        else:
            disp_dir = os.path.join(dataset_path,'IGEV_gt/disp').replace('KITTI_2','KITTI')
        # disp_dir = os.path.join(dataset_path,'CreStereo/disp')
    else:
        disp_dir = os.path.join(dataset_path,'{}/disp'.format(method))
        
    left_list = dirs_walk([left_dir])
    right_list = dirs_walk([right_dir])
    disp_list = dirs_walk([disp_dir])
    addition_list = dirs_walk([addition_dir])  
    for file_name in left_list.copy():
        if '_11' in file_name:
            left_list.remove(file_name)
    for file_name in right_list.copy():
        if '_11' in file_name:
            right_list.remove(file_name)

    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(left_list)):
        split_path = left_list[i].split('/')
        name = split_path[-1].split('.')[0]
        save_dir = '/'.join(split_path[:-2])
        save_dir1 = os.path.join(save_dir,'{}/disp'.format(save_method))
        save_dir2 = os.path.join(save_dir,'{}/vis'.format(save_method))
        save_path1 = os.path.join(save_dir1,'{}.npy'.format(name))
        save_path2 = os.path.join(save_dir2,'{}.png'.format(name))
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
    if not os.path.exists(save_dir1):
        os.makedirs(save_dir1)
    if not os.path.exists(save_dir2):
        os.makedirs(save_dir2)
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image,None
    # return left_list,right_list,disp_list,save_path_disp,save_path_disp_image,addition_list

def list_sort(left_list,right_list,disp_list,save_path_disp,save_path_disp_image):
    left_list.sort()
    right_list.sort()
    disp_list.sort()
    save_path_disp.sort()
    save_path_disp_image.sort()
    # return left_list,right_list,disp_list,save_path_disp,save_path_disp_image

